"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("dynamic"),ApplicationConfiguration.registerModule("tags"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menus=[],$scope.menus.push(Menus.getMenu("public")),$scope.menus.push(Menus.getMenu("private")),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("private"),this.addMenu("public",!0)}]),angular.module("dynamic").run(["Menus",function(Menus){Menus.addMenuItem("private","Dynamic Data","dynamic","dropdown"),Menus.addSubMenuItem("private","dynamic","PUT","dynamic/put","/dynamic/put"),Menus.addSubMenuItem("private","dynamic","GET","dynamic/get","/dynamic/get")}]),angular.module("dynamic").config(["$stateProvider",function($stateProvider){$stateProvider.state("dynamic-put",{url:"/dynamic/put",templateUrl:"modules/dynamic/views/put.client.view.html"}).state("dynamic-get",{url:"/dynamic/get",templateUrl:"modules/dynamic/views/get.client.view.html"})}]),angular.module("dynamic").controller("DynamicController",["$scope","$stateParams","$location","Authentication","DynamicService",function($scope,$stateParams,$location,Authentication,DynamicService){$scope.authentication=Authentication,$scope.create={appName:"",pairs:[]},$scope.addPair=function(){$scope.create.pairs.push({key:"",value:""})},$scope.putDynamicData=function(){var data={};for(var i in $scope.create.pairs)data[$scope.create.pairs[i].key]=$scope.create.pairs[i].value;var service=new DynamicService(data);service.$update({app:$scope.create.appName},function(){$scope.create={appName:"",pairs:[]},$scope.success=!0},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findUserDynamicData=function(){var service=new DynamicService;service.$get({app:$scope.appName},function(response){$scope.userDynamicData=JSON.stringify(response)},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("dynamic").factory("DynamicService",["$resource",function($resource){return $resource("/dynamic/:app",{},{update:{method:"PUT"}})}]),angular.module("tags").run(["Menus",function(Menus){Menus.addMenuItem("public","Tags","tags","dropdown"),Menus.addSubMenuItem("public","tags","Tag","tag","/tags/tag"),Menus.addSubMenuItem("public","tags","Subtag","subtag","/tags/subtag"),Menus.addSubMenuItem("public","tags","User Tags","usertags","/tags/userTags")}]),angular.module("tags").config(["$stateProvider",function($stateProvider){$stateProvider.state("tag",{url:"/tag",templateUrl:"modules/tags/views/tag.client.view.html"}).state("subtag",{url:"/subtag",templateUrl:"modules/tags/views/subtag.client.view.html"}).state("usertags",{url:"/usertags",templateUrl:"modules/tags/views/view-usertags.client.view.html"})}]),angular.module("tags").controller("TagsController",["$scope","$stateParams","$location","Authentication","TagsService",function($scope,$stateParams,$location,Authentication,TagsService){$scope.authentication=Authentication,$scope.setTag=function(){var tag={tag:this.tag.name,keys:this.tag.keys.split(",")};TagsService.tag.save(tag,function(){$location.path("usertags"),$scope.tag={}},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.setSubtag=function(){$scope.subtag.keys=$scope.subtag.keys.split(","),TagsService.subtag.update($scope.subtag,function(){$location.path("usertags"),$scope.subtag={}},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findTags=function(){TagsService.tags.get(function(response){$scope.allTags=JSON.stringify(response.tags)},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("tags").factory("TagsService",["$resource",function($resource){return{tags:$resource("/tags"),tag:$resource("/tag"),subtag:$resource("/subtag",null,{update:{method:"PUT"}})}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("email-verification",{url:"/email/verification",templateUrl:"modules/users/views/email/verification-email.client.view.html"}).state("email-verify",{url:"/email/verify/:token",templateUrl:"modules/users/views/email/verify-email.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/email/verification")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("AuthenticationLoguedController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.credentials={username:$scope.user.username},$scope.signup=function(){$http.put("/users",$scope.user).success(function(response){$scope.authentication.user=response,$scope.$close(),$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$scope.$close(),$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("EmailController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.sendEmailVerification=function(){$http.post("/users/verification/email",{email:$scope.authentication.user.email}).success(function(response){$scope.success=response.message}).error(function(response){$scope.error=response.message})},$scope.verifyEmail=function(){$http.get("/users/verify/email/"+$stateParams.token).success(function(){$scope.success="Email for your account has been verified"}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication","$modal",function($scope,$http,$location,Users,Authentication,$modal){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.providersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.providersData&&$scope.user.providersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})},$scope.abrirModalLogin=function(){$modal.open({templateUrl:"modules/users/views/authentication/signin.client.modal.html",controller:"AuthenticationLoguedController"})},$scope.getArrayBy=function(num){return new Array(num)}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);